(library
  (common)
  (export char-utf8-len
	  fmap
	  err
	  is-error?
	  dbg)
  (import (rnrs base)
	  (rnrs io simple)
	  (rnrs))

  ; Returns the length in bytes the character takes in utf8.
  (define (char-utf8-len c)
    (let ([n (char->integer c)])
      (cond
	[(<= n #x7F) 1]
	[(<= n #x7FF) 2]
	[(<= n #xFFFF) 3]
	[else 4])))

  ;; Returns a pair representing an error from a function.
  (define err
    (lambda (e . extra)
      (cons 'error
	    (if (null? extra)
	      e
	      (cons e extra)))))

  ;; Returns `#t` if `x` is an error generated from `err`.
  (define is-error?
    (lambda (x)
      (and (pair? x)
	   (eq? 'error (car x)))))

  ;; Applies `f` to `m` if it is not an error value (i.e. `#f`, or an error
  ;; generated by `err`.)
  (define fmap
    (lambda (f m)
      (cond
	[(and (pair? m)
	      (eq? 'error (car m)))
	 m]
	[m (f m)]
	[else m])))

  ;; Evaluates `e`, prints it and returns it.
  (define-syntax dbg
    (syntax-rules ()
      [(dbg e)
       (let ([t e])
	 (display (syntax->datum #'e))
	 (display ": ")
	 (display t)
	 (newline)
	 t)])))
